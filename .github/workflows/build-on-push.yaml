# This workflow will build a MuleSoft project

name: Build Mulesoft

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Add repo credentials
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [
            {
              "id": "mule-enterprise",
              "username": "${{ secrets.mule_nexus_username }}",
              "password": "${{ secrets.mule_nexus_password }}"
            }
          ]
    
    # securekey and env are environment specific
    - name: Build with Maven
      run: mvn -B -Dsecure.key=${{ secrets.secure_key }} -Denv=dev install package --file pom.xml
    
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    env:
      connected_app_clientId: ${{ secrets.connected_app_clientId }}
      connected_app_clientSecret: ${{ secrets.connected_app_clientSecret }}

    steps:
    
    # will need to checkout the POM file so and other dependencies so that mvn an work properly
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
        
    - name: Add repo credentials
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [
            {
              "id": "mule-enterprise",
              "username": "${{ secrets.mule_nexus_username }}",
              "password": "${{ secrets.mule_nexus_password }}"
            },
            {
              "id": "anypoint-exchange-v3",
              "username": "~~~Client~~~",
              "password": "${{ secrets.connected_app_clientId }}~?~${{ secrets.connected_app_clientSecret }}"
            }
          ]
          
    - name: print secret
      run: |
        echo "business_group_id:${{secrets.business_group_id }}" | sed 's/./& /g';
        echo "connected_app_clientId:${{secrets.connected_app_clientId }}" | sed 's/./& /g';
        echo "connected_app_clientSecret:${{secrets.connected_app_clientSecret }}" | sed 's/./& /g';
        echo "anypoint_platform_clientId:${{secrets.anypoint_platform_clientId }}" | sed 's/./& /g';
        echo "anypoint_platform_clientSecret:${{secrets.anypoint_platform_clientSecret }}" | sed 's/./& /g';
    
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings
    
    - name: Deploy to Dev
      env:
        business_group_id: ${{ secrets.business_group_id }}
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -DbusinessGroup.id="${{ secrets.business_group_id }}" \
         -DconnectedApp.clientId="${{ secrets.connected_app_clientId }}" \
         -DconnectedApp.clientSecret="${{ secrets.connected_app_clientSecret }}" \
         -DanypointPlatform.clientId="${{ secrets.anypoint_platform_clientId }}" \
         -DanypointPlatform.clientSecret="${{ secrets.anypoint_platform_clientSecret }}" \
         -Denv=DEV \
         -Dsecure.key="${{ secrets.secure_key }}" \
         -DskipTests \
         -e \
         -X 